import tensorflow as tf
import zipfile
import io
from tqdm import tqdm

# 설정
ZIP_PATH = "secret.zip"
FILE_TO_EXTRACT = "flag.txt"
CHARSET = "abcdefghijklmnopqrstuvwxyz0123456789"
PASSWORD_LENGTH = 6
BATCH_SIZE = 10000  # GPU 메모리에 따라 조정 가능

# 문자열 조합 생성기 (숫자 기반 인덱스를 문자열로 매핑)
def generate_passwords_tf(start_idx, count, charset, length):
    base = len(charset)
    indices = tf.range(start_idx, start_idx + count, dtype=tf.int64)

    # 숫자를 문자열 인덱스로 변환
    digits = []
    for i in range(length):
        digits.append(indices % base)
        indices = indices // base
    digits = tf.stack(digits[::-1], axis=1)

    charset_tensor = tf.constant(list(charset))
    passwords = tf.strings.reduce_join(tf.gather(charset_tensor, digits), axis=1)
    return passwords

# 실제 zip 해제 시도
def try_passwords(zip_data, passwords):
    for pwd in passwords:
        try:
            with zipfile.ZipFile(io.BytesIO(zip_data)) as zf:
                zf.extract(FILE_TO_EXTRACT, pwd=bytes(pwd, 'utf-8'))
                print(f"\n[성공!] 비밀번호는: {pwd}")
                return pwd
        except:
            continue
    return None

# 전체 실행
def main():
    with open(ZIP_PATH, 'rb') as f:
        zip_data = f.read()

    total = len(CHARSET) ** PASSWORD_LENGTH

    for i in tqdm(range(0, total, BATCH_SIZE)):
        current_batch = min(BATCH_SIZE, total - i)

        with tf.device("/GPU:0"):
            batch = generate_passwords_tf(i, current_batch, CHARSET, PASSWORD_LENGTH).numpy().astype(str)

        result = try_passwords(zip_data, batch)
        if result:
            break

if __name__ == "__main__":
    main()
